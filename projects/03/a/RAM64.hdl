// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load ,sel=address[0..2] ,a=a ,b=b ,c=c ,d=d ,e=e ,f=f ,g=g ,h=h);
    RAM8(in=in[0..15] ,load=a ,address=address[3..5] ,out=sortie1);
    RAM8(in=in[0..15] ,load=b ,address=address[3..5] ,out=sortie2);
    RAM8(in=in[0..15] ,load=c ,address=address[3..5] ,out=sortie3);
    RAM8(in=in[0..15] ,load=d ,address=address[3..5] ,out=sortie4);
    RAM8(in=in[0..15] ,load=e ,address=address[3..5] ,out=sortie5);
    RAM8(in=in[0..15] ,load=f ,address=address[3..5] ,out=sortie6);
    RAM8(in=in[0..15] ,load=g ,address=address[3..5] ,out=sortie7);
    RAM8(in=in[0..15] ,load=h ,address=address[3..5] ,out=sortie8);
    Mux8Way16(a=sortie1 ,b=sortie2 ,c=sortie3 ,d=sortie4 ,e=sortie5 ,f=sortie6 ,g=sortie7 ,h=sortie8 ,sel=address[0..2] ,out=out[0..15]);
}